(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{485:function(s,t,a){"use strict";a.r(t);var _=a(2),n=Object(_.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("SQL调优是在日常生产中运用广泛")]),s._v(" "),t("p",[s._v("近些年大厂面试越来越容易问")]),s._v(" "),t("p",[s._v("一条SQL语句")]),s._v(" "),t("p",[s._v("造成的影响还是挺大的")]),s._v(" "),t("p",[s._v("那么在SQL调优之前")]),s._v(" "),t("p",[s._v("MySQL查询优化器是怎么做的呢?")]),s._v(" "),t("p",[s._v("接下来我们来了解一下")]),s._v(" "),t("h2",{attrs:{id:"一-成本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-成本"}},[s._v("#")]),s._v(" 一.成本")]),s._v(" "),t("p",[s._v("MySQL执行一个查询可以有不同的执行方案,它会选择其中成本最低的方案去执行查询")]),s._v(" "),t("p",[s._v("MySQL的成本主要由以下两部分组成:")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("I/O成本")])]),s._v(" "),t("p",[s._v("存储引擎一般将数据和索引存储到磁盘上,当我们进行查询时,需要将数据和索引加载到内存中,这段I/O所消耗的时间被称为I/O成本")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("CPU成本")])]),s._v(" "),t("p",[s._v("检测读取是否满足条件的记录,对结果及排序等等,被称为CPU成本")])])]),s._v(" "),t("p",[s._v("对于InnoDB说,"),t("strong",[s._v("页")]),s._v("是磁盘和内存之间交互的基本单位")]),s._v(" "),t("p",[s._v("MySQL规定:")]),s._v(" "),t("p",[s._v("读取一个页花费的成本是 --- 1.0")]),s._v(" "),t("p",[s._v("读取检测一条记录的成本 --- 0.2")]),s._v(" "),t("p",[s._v("1.0 或 0.2 都被称为 "),t("strong",[s._v("成本常数")]),s._v("(可调节)")]),s._v(" "),t("h2",{attrs:{id:"二-单表查询的成本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-单表查询的成本"}},[s._v("#")]),s._v(" 二.单表查询的成本")]),s._v(" "),t("p",[s._v("我们先准备一张表:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" single_table "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AUTO_INCREMENT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n key1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n key2 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n key3 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n key_part1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n key_part2 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n key_part3 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n common_field "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" idx_key1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNIQUE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" idx_key2 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" idx_key3 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" idx_key_part"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key_part1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key_part2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key_part3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Engine")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("InnoDB")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHARSET")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("utf8"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("假设有10000条数据,除了ID都是随机插入的值")]),s._v(" "),t("p",[s._v("key1,2,3都是普通索引")]),s._v(" "),t("p",[s._v("idx_key_part是联合索引")]),s._v(" "),t("h3",{attrs:{id:"基于成本的优化步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于成本的优化步骤"}},[s._v("#")]),s._v(" 基于成本的优化步骤")]),s._v(" "),t("p",[s._v("在一条单表查询语句真正执行之前,MySQL 的查询优化器会找出执行该语句所有可能使用的方案")]),s._v(" "),t("p",[s._v("对比之后找出成本最低的方案,这个成本最低的方案就是所谓的 "),t("strong",[s._v("执行计划")])]),s._v(" "),t("p",[s._v("之后才会调用存储引擎提供的接口真正的执行查询")]),s._v(" "),t("p",[s._v("过程如下:")]),s._v(" "),t("ol",[t("li",[s._v("根据搜索条件，找出所有可能使用的索引")]),s._v(" "),t("li",[s._v("计算全表扫描的代价")]),s._v(" "),t("li",[s._v("计算使用不同索引执行查询的代价")]),s._v(" "),t("li",[s._v("对比各种执行方案的代价，找出成本最低的那一个")])]),s._v(" "),t("p",[s._v("我们用一个实例分析一下")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" single_table "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" \n key1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'c'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" \n key2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" key2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" \n key3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" key2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" \n key_part1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%hello%'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v("\n common_field "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'123'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"_1-根据搜索条件-找出所有可能使用的索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-根据搜索条件-找出所有可能使用的索引"}},[s._v("#")]),s._v(" 1.根据搜索条件,找出所有可能使用的索引")]),s._v(" "),t("p",[s._v("我们逐个分析:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("key1 IN ('a', 'b', 'c')")]),s._v(" ，这个搜索条件可以使用二级索引 idx_key1")]),s._v(" "),t("li",[t("strong",[s._v("key2 > 10 AND key2 < 1000")]),s._v(" ，这个搜索条件可以使用二级索引 idx_key2")]),s._v(" "),t("li",[t("strong",[s._v("key3 > key2")]),s._v(" ，这个搜索条件的索引列由于没有和常数比较，所以并不能使用到索引")]),s._v(" "),t("li",[t("strong",[s._v("key_part1 LIKE '%hello%'")]),s._v(",key_part1通过 LIKE 操作符和以通配符开头的字符串做比较，不可以适用索引")]),s._v(" "),t("li",[t("strong",[s._v("common_field = '123'")]),s._v(" ，由于该列上压根儿没有索引，所以不会用到索引")])]),s._v(" "),t("p",[s._v("所以可能使用到的索引就是"),t("strong",[s._v("idx_key1")]),s._v("和"),t("strong",[s._v("idx_key2")])]),s._v(" "),t("h3",{attrs:{id:"_2-计算全表扫描的代价"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-计算全表扫描的代价"}},[s._v("#")]),s._v(" 2.计算全表扫描的代价")]),s._v(" "),t("p",[s._v("我们知道查询成本 = I/O成本+CPU成本")]),s._v(" "),t("p",[s._v("所以我们需要两个信息:")]),s._v(" "),t("ul",[t("li",[s._v("聚簇索引占用的页数")]),s._v(" "),t("li",[s._v("该表表中的记录数")])]),s._v(" "),t("p",[s._v("MySQL为每个表维护了一系列的统计信息")]),s._v(" "),t("p",[s._v("SQL语句如下:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("STATUS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'single_table'")]),s._v("\\G\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("然后我们会看到")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://18334034784.oss-cn-chengdu.aliyuncs.com/lin-oss/tablestatus.png",alt:"image-20231225173336295"}})]),s._v(" "),t("p",[s._v("我们只关心两个数据:")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("Row")]),s._v(" --- 9693")]),s._v(" "),t("p",[s._v("表中的记录数,在InnoDB中是一个估计值,")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("Data_length")]),s._v(" --- 1589248")]),s._v(" "),t("p",[s._v("表占用的存储空间字节数对于InnoDB来说,该值相当于"),t("strong",[s._v("聚簇索引")]),s._v("占用的存储空间大小")]),s._v(" "),t("p",[s._v("Data_length = 聚簇索引的页面数量 * 每个页面的大小")]),s._v(" "),t("p",[s._v("InnoDB每个页16kb")]),s._v(" "),t("p",[s._v("聚簇索引的页面数量 = 1589248 /16 /1024 = 97")])])]),s._v(" "),t("p",[s._v("现在可以计算全表扫描的代价了")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("I/O成本:")])]),s._v(" "),t("p",[s._v("97 * 1.0 + 1.1 = 98.1")]),s._v(" "),t("p",[s._v("97表示页数,1.0表示加载一个页面的成本常数,1.1为一个微调值")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("CPU成本:")])]),s._v(" "),t("p",[s._v("9693 * 0.2 + 1.0 = 1939.6")]),s._v(" "),t("p",[s._v("9693 指的是统计数据中表的记录数,0.2 指的是访问一条记录 所需的成本常数,后边的 1.0 是一个微调值")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("总成本:")])]),s._v(" "),t("p",[s._v("98.1 + 1939.6 = 2037.7")])])]),s._v(" "),t("p",[s._v("综上所述，对于 single_table 的全表扫描所需的总成本就是 2037.7")]),s._v(" "),t("h3",{attrs:{id:"_3-计算不同索引执行查询的代价"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-计算不同索引执行查询的代价"}},[s._v("#")]),s._v(" 3.计算不同索引执行查询的代价")]),s._v(" "),t("p",[s._v("从第一步分析得知")]),s._v(" "),t("p",[s._v("上述查询可能使用到idx_key1和idx_key2这两个索引")]),s._v(" "),t("p",[s._v("MySQL 查询优化器先分析使用唯一二级索引的成本,再分析使用普通索引的成本,所以我们也先分析 idx_key2 的成本,然后再看使用 idx_key1 的成本")]),s._v(" "),t("h4",{attrs:{id:"_1-分析key2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-分析key2"}},[s._v("#")]),s._v(" 1).分析key2")]),s._v(" "),t("p",[s._v("key2的搜索条件为:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("key2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" key2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("第一步,MySQL先从idx_key2索引中定位key2在(10,1000)这个区间的记录,找到这些记录对应的id列的值")]),s._v(" "),t("p",[s._v("第二步,MySQL再从聚簇索引中更具上一步得到的id值找到完整用户记录")]),s._v(" "),t("p",[s._v("对于"),t("em",[s._v("二级索引 + 回表")]),s._v("的方式,MySQL分析成本基于两个方面的数据:")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("范围区间数量:")])]),s._v(" "),t("p",[s._v("无论区间占用多少页面,查询优化器认为读取索引的一个区间范围的I/O成本与读取一个页面是相同的,所以访问这个区间的二级索引成本为:")]),s._v(" "),t("p",[s._v("1 * 1.0 = 1.0")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("需要回表的记录数:")])]),s._v(" "),t("p",[s._v("先找到区间最左记录,再找到区间最右记录,这两个操作都是常数级别")]),s._v(" "),t("p",[s._v("如果这两条记录相隔不远(MySQL5.7)是不大于10个页,则可以精确统计")]),s._v(" "),t("p",[s._v("如果太远就向右读10个页,计算平均每个页中包含多少记录")])])]),s._v(" "),t("blockquote",[t("p",[s._v("如何确定他们之间有多少记录呢?")])]),s._v(" "),t("p",[s._v("我们知道,索引的目录项对应一个数据页")]),s._v(" "),t("p",[s._v("所以可以计算其"),t("strong",[s._v("父节点之间隔了几条记录")])]),s._v(" "),t("p",[s._v("根据上诉算法测得idx_key2在区间(10,1000)中包含大约95条记录")]),s._v(" "),t("p",[s._v("读取95条二级索引的CPU成本就是")]),s._v(" "),t("p",[s._v("95 * 0.2 + 0.01 = 19.01")]),s._v(" "),t("p",[s._v("接着还需要做两件事:")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("根据这些记录里的主键值到聚簇索引中做回表操作")])]),s._v(" "),t("p",[s._v("I/O成本为 95 * 1.0 = 95.0")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("回表操作后得到的完整用户记录，然后再检测搜索条件是否成立")])]),s._v(" "),t("p",[s._v("这部分操作就是95 * 0.2 = 19.0")])])]),s._v(" "),t("p",[s._v("所以idx_key2的查询成本为")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("I/O成本:")]),s._v(" "),t("p",[s._v("95 * 1.0 = 96.0")])]),s._v(" "),t("li",[t("p",[s._v("CPU成本:")]),s._v(" "),t("p",[s._v("95 * 0.2 + 0.01 + 95 * 0.2 = 38.01")])]),s._v(" "),t("li",[t("p",[s._v("总成本:")]),s._v(" "),t("p",[s._v("96.0 + 38.01 = 134.01")])])]),s._v(" "),t("p",[s._v("综上所诉")]),s._v(" "),t("p",[s._v("当计算二级索引+回表操作时")]),s._v(" "),t("p",[s._v("需要分别计算二级索引的成本和回表的成本")]),s._v(" "),t("h4",{attrs:{id:"_2-分析key1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-分析key1"}},[s._v("#")]),s._v(" 2).分析key1")]),s._v(" "),t("p",[s._v("idx_key1 对应的搜索条件是：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("key1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'c'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("相当于三个单点区间")]),s._v(" "),t("p",[s._v("第一步,先查询二级索引中这些记录对应的id列的值")]),s._v(" "),t("p",[s._v("第二步,再从聚簇索引中根据上一步得到的一系列id值找到完整的用户记录")]),s._v(" "),t("p",[s._v("我们直接进行计算")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("范围区间数量")]),s._v(":")]),s._v(" "),t("p",[s._v("3 * 1.0 = 3.0")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("需要回表的记录数")])]),s._v(" "),t("p",[s._v("(35 + 44 + 39) * 0.2 + 0.01 = 23.61")]),s._v(" "),t("p",[s._v("即是CPU成本")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("回表操作的成本")])]),s._v(" "),t("p",[s._v("118 x 1.0 = 118.0")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("回表操作后得到的完整用户记录，然后再检测搜索条件是否成立")])]),s._v(" "),t("p",[s._v("118 x 0.2 = 23.6")])])]),s._v(" "),t("p",[s._v("综上所述，使用 idx_key1 执行查询的总成本就是： 121.0 + 47.21 = 168.21")]),s._v(" "),t("h3",{attrs:{id:"_4-对比各种执行方案的代价-找出成本最低的那一个"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-对比各种执行方案的代价-找出成本最低的那一个"}},[s._v("#")]),s._v(" 4. 对比各种执行方案的代价，找出成本最低的那一个")]),s._v(" "),t("ul",[t("li",[s._v("全表扫描的成本： 2037.7")]),s._v(" "),t("li",[s._v("使用 idx_key2 的成本： 134.01")]),s._v(" "),t("li",[s._v("使用 idx_key1 的成本： 168.21")])]),s._v(" "),t("p",[s._v("很显然,选择使用idx_key2来执行查询")]),s._v(" "),t("h2",{attrs:{id:"三-连接查询的成本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-连接查询的成本"}},[s._v("#")]),s._v(" 三.连接查询的成本")]),s._v(" "),t("p",[s._v("连接查询至少有两张表吧")]),s._v(" "),t("p",[s._v("我们再准备一张和之前那张表一样")]),s._v(" "),t("p",[s._v("之前那张叫做s1,这张叫做s2吧")]),s._v(" "),t("h3",{attrs:{id:"_1-连接的成本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-连接的成本"}},[s._v("#")]),s._v(" 1.连接的成本")]),s._v(" "),t("p",[s._v("MySQL 中连接查询采用的是嵌套循环连接算法，驱动表会被访问一次，被驱动表可能会被访问多 次")]),s._v(" "),t("p",[s._v("所以对于两表连接查询来说，它的查询成本由下边两个部分构成：")]),s._v(" "),t("ul",[t("li",[s._v("单次查询驱动表的成本")]),s._v(" "),t("li",[s._v("多次查询被驱动表的成本")])]),s._v(" "),t("p",[s._v("我们把对驱动表进行查询后得到的记录条数称之为驱动表的 "),t("strong",[s._v("扇出")])]),s._v(" "),t("p",[s._v("........")]),s._v(" "),t("p",[s._v("太多了")]),s._v(" "),t("p",[s._v("不想写了")]),s._v(" "),t("p",[s._v("以后再更😋")])])}),[],!1,null,null,null);t.default=n.exports}}]);