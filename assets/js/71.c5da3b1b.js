(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{508:function(t,a,s){"use strict";s.r(a);var n=s(2),_=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("SpringBoot两大功能")]),t._v(" "),a("p",[t._v("一个是起步依赖")]),t._v(" "),a("p",[t._v("能帮助你管理好依赖的信息")]),t._v(" "),a("p",[t._v("二个是自动配置Bean")]),t._v(" "),a("p",[t._v("SpringBoot如何获取Bean,这是个问题")]),t._v(" "),a("p",[t._v("下面我们详细说说")]),t._v(" "),a("h2",{attrs:{id:"一-起步依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-起步依赖"}},[t._v("#")]),t._v(" 一.起步依赖")]),t._v(" "),a("p",[t._v("起步依赖有两个重要的")]),t._v(" "),a("p",[a("big",[a("strong",[t._v("spring-boot-starter-parent")])])],1),t._v(" "),a("p",[t._v("SpringBoot工程需要引用的父依赖")]),t._v(" "),a("p",[t._v("根据源码我们发现")]),t._v(" "),a("p",[a("code",[t._v("spring-boot-starter-parent")]),t._v("还依赖于另外一个父工程"),a("code",[t._v("spring-boot-dependencies")])]),t._v(" "),a("p",[t._v("而在spring-boot-dependencies中融合了各个技术的版本")]),t._v(" "),a("p",[t._v("这样就防止开发人员在开发时遇到版本冲突问题")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://18334034784.oss-cn-chengdu.aliyuncs.com/lin-oss/%E8%B5%B7%E6%AD%A5%E4%BE%9D%E8%B5%96.png",alt:"image-20231117195809557"}})]),t._v(" "),a("p",[t._v("所以说Spring只是帮你做了各个技术实现的整合,是站在Spring的肩膀上")]),t._v(" "),a("p",[a("big",[a("strong",[t._v("spring-boot-starter-web")])])],1),t._v(" "),a("p",[t._v("spring-boot-starter-web依赖启动器的主要作用是提供Web开发场景所需的底层所有依赖")]),t._v(" "),a("p",[t._v("比如")]),t._v(" "),a("p",[t._v("Spring-web")]),t._v(" "),a("p",[t._v("Spring-webmvc")]),t._v(" "),a("p",[t._v("所以项目间接依赖于这些底层依赖")]),t._v(" "),a("p",[t._v("这就是依赖传递")]),t._v(" "),a("h2",{attrs:{id:"二-自动配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-自动配置"}},[t._v("#")]),t._v(" 二.自动配置")]),t._v(" "),a("h3",{attrs:{id:"_1-conditional"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-conditional"}},[t._v("#")]),t._v(" 1.@Conditional")]),t._v(" "),a("p",[t._v("是在Spring4.0增加的条件判断功能")]),t._v(" "),a("p",[t._v("通过这个功能可以实现选择性创建bean操作")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"title"}),a("p",[t._v("Spring是如何知道要创建哪个bean的?")])]),a("p",[t._v("Spring会用Condition判断当前容器环境中是否有需要获取的Bean")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Conditional")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//即Conditional(xxx.class)")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("Class< T>这个类就是一个是否创建Bean的开关")]),t._v(" "),a("p",[t._v("该类的 **matches()**中设定条件改变返回值")]),t._v(" "),a("p",[t._v("返回true则创建")]),t._v(" "),a("p",[t._v("返回false则创建")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://18334034784.oss-cn-chengdu.aliyuncs.com/lin-oss/conditional.png",alt:"image-20231117203445751"}})]),t._v(" "),a("p",[t._v("SpringBoot中给我们定义了一堆Condition包")]),t._v(" "),a("p",[t._v("可以根据各种条件是否创建一个bean")]),t._v(" "),a("p",[t._v("例如")]),t._v(" "),a("p",[t._v("这里有个创造redisTemplate的源码")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://18334034784.oss-cn-chengdu.aliyuncs.com/lin-oss/redisTemplate.png",alt:"image-20231117203934219"}})]),t._v(" "),a("ul",[a("li",[t._v("23行 : 要创建这个bean先满足有RedisOperations的字节码文件")]),t._v(" "),a("li",[t._v("31行 : 要创建这个bean方法先满足redisTemplate这个Bean未被创建")])]),t._v(" "),a("h3",{attrs:{id:"_2-切换内置web服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-切换内置web服务器"}},[t._v("#")]),t._v(" 2.切换内置web服务器")]),t._v(" "),a("p",[t._v("总所周知")]),t._v(" "),a("p",[t._v("SpringBoot的web环境中默认使用tomcat作为内置服务器,存放在spring-boot-starter-web依赖中")]),t._v(" "),a("p",[t._v("但是其实SpringBioot提供了4中内置服务器供我们选择")]),t._v(" "),a("p",[t._v("具体的切换方法是在spring-boot-starter-web依赖中排出一个")]),t._v(" "),a("p",[t._v("引入另一个")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://18334034784.oss-cn-chengdu.aliyuncs.com/lin-oss/%E5%88%87%E6%8D%A2%E5%86%85%E7%BD%AEweb%E6%9C%8D%E5%8A%A1%E5%99%A8.png",alt:"image-20231117204838862"}})]),t._v(" "),a("h3",{attrs:{id:"_3-enable-注解原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-enable-注解原理"}},[t._v("#")]),t._v(" 3.@Enable*注解原理")]),t._v(" "),a("p",[t._v("SpringBoot中提供了很多"),a("strong",[t._v("Enable")]),t._v("开头的注解，这些注解都是用于动态启用某些功能的")]),t._v(" "),a("p",[a("u",[t._v("而其底层原理是使用@Import注解导入一些配置类，实现Bean的动态加载")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"title"}),a("p",[t._v("SpringBoot工程是否可以直接获取jar包里面的Bean?")])]),a("p",[t._v("答案是不可以")]),t._v(" "),a("p",[t._v("为什么?")]),t._v(" "),a("p",[t._v("我们看看@SpringBootApplication的源代码")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://18334034784.oss-cn-chengdu.aliyuncs.com/lin-oss/ComponentScan.png",alt:"image-20231117205641505"}})]),t._v(" "),a("p",[t._v("@ComponentScan这个注解扫描的是启动类当前包以及子包")]),t._v(" "),a("p",[t._v("所以加载不到")]),t._v(" "),a("p",[t._v("但是我们有两种方式解决 :")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("@ComponentScan注解扫描Bean所在包")])]),t._v(" "),a("li",[a("p",[t._v("@Import()该bean的class,如 @Import(xxx.class)")])]),t._v(" "),a("li",[a("p",[t._v("对Import进行封装")])])]),t._v(" "),a("h3",{attrs:{id:"_4-import注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-import注解"}},[t._v("#")]),t._v(" 4.@Import注解")]),t._v(" "),a("p",[t._v("有四种用法 :")]),t._v(" "),a("ol",[a("li",[t._v("导入Bean,@Import(xxx.class)")]),t._v(" "),a("li",[t._v("导入配置类,@Import(xxxConfig.class)")]),t._v(" "),a("li",[t._v("导入ImportSelector的实现类")]),t._v(" "),a("li",[t._v("导入ImportBeanDefinitionRegisterar实现类")])]),t._v(" "),a("p",[t._v("我们进入**@EnableAutoConfiguration**注解")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://18334034784.oss-cn-chengdu.aliyuncs.com/lin-oss/EnableAutoConfiguration.png",alt:"image-20231117211800983"}})]),t._v(" "),a("p",[t._v("AutoConfigurationImportSelector就是ImportSelector的实现类对象")]),t._v(" "),a("h3",{attrs:{id:"_5-自动配置流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-自动配置流程"}},[t._v("#")]),t._v(" 5.自动配置流程")]),t._v(" "),a("p",[t._v("了解了以上内容")]),t._v(" "),a("p",[t._v("我们来说说SpringBoot的自动配置流程")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("@EnableAutoConfiguration注解内部使用"),a("font",{attrs:{color:"yellow"}},[t._v("@Import ")]),t._v("(AutoConfigurationImportselector."),a("font",{attrs:{color:"blue"}},[t._v("class")]),t._v(">)来加载配置类")],1)]),t._v(" "),a("li",[a("p",[t._v("配置文件位置:META-INF/spring.factories，该配置文件中定义了大量的配置类，当SpringBoot应用启动时，会自动加载这些配置类，初始化Bean")])]),t._v(" "),a("li",[a("p",[t._v("但并不是所有Bean都会被初始化,在配置类中使用Confition来加载满足条件的Bean")])])])])}),[],!1,null,null,null);a.default=_.exports}}]);