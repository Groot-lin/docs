(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{481:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("Redis是基于C语言开发,运行在内存的高性能缓存中间件")]),s._v(" "),t("p",[s._v("是一种键值型数据库")]),s._v(" "),t("p",[s._v("Redis内部有五种数据结构:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("String")])]),s._v(" "),t("li",[t("strong",[s._v("List")])]),s._v(" "),t("li",[t("strong",[s._v("Hash")])]),s._v(" "),t("li",[t("strong",[s._v("Set")])]),s._v(" "),t("li",[t("strong",[s._v("Sorted Set")])])]),s._v(" "),t("p",[s._v("那么这些数据结构的底层如何实现呢?")]),s._v(" "),t("h2",{attrs:{id:"一-五种数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-五种数据结构"}},[s._v("#")]),s._v(" 一.五种数据结构")]),s._v(" "),t("h3",{attrs:{id:"_1-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-string"}},[s._v("#")]),s._v(" 1.String")]),s._v(" "),t("ol",[t("li",[s._v("字符串对象保存的是整数,并且可以用long来表示,那么字符串对象会将整数值保存在字符串对象结构的ptr属性中,并将字符串对象编码设置为int")]),s._v(" "),t("li",[s._v("如果是一个字符串值,且长度"),t("strong",[s._v("小于等于39字节")]),s._v(",使用embstr编码方式保存字符串")]),s._v(" "),t("li",[s._v("如果是一个字符串值,且"),t("strong",[s._v("长度大于39字节")]),s._v(",使用简单动态字符串(SDS)保存,并将编码设置为raw")])]),s._v(" "),t("h3",{attrs:{id:"_2-list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-list"}},[s._v("#")]),s._v(" 2.List")]),s._v(" "),t("p",[s._v("列表对象底层实现为:")]),s._v(" "),t("p",[s._v("如果字符串元素长度都小于64,或者保存元素小于512个,使用"),t("strong",[s._v("ziplist压缩数组")])]),s._v(" "),t("p",[s._v("否则使用"),t("strong",[s._v("linkedlist双向链表")])]),s._v(" "),t("h3",{attrs:{id:"_3-hash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-hash"}},[s._v("#")]),s._v(" 3.Hash")]),s._v(" "),t("p",[s._v("哈希对象的底层实现为")]),s._v(" "),t("p",[s._v("哈希对象保存的所有键值对的键和值的字符串长度都小于 64 字节并且保存的键值对数量小于 512 个，使用"),t("strong",[s._v("ziplist压缩数组")])]),s._v(" "),t("p",[s._v("否则使用"),t("strong",[s._v("hashtable字典")])]),s._v(" "),t("h3",{attrs:{id:"_4-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-set"}},[s._v("#")]),s._v(" 4.Set")]),s._v(" "),t("p",[s._v("集合对象的底层实现为:")]),s._v(" "),t("p",[s._v("集合对象保存的所有元素都是整数值并且保存的元素数量不超过 512 个，使用"),t("strong",[s._v("intset")])]),s._v(" "),t("p",[s._v("否则使用"),t("strong",[s._v("hashtable")])]),s._v(" "),t("h3",{attrs:{id:"_5-sorted-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-sorted-set"}},[s._v("#")]),s._v(" 5.Sorted Set")]),s._v(" "),t("p",[s._v("有序集合的底层实现为:")]),s._v(" "),t("p",[s._v("有序集合保存的元素数量小于 128 个并且保存的所有元素成员的长度都小于 64 字节使用 "),t("strong",[s._v("ziplist")])]),s._v(" "),t("p",[s._v("否则使用"),t("strong",[s._v("skiplist")])]),s._v(" "),t("h2",{attrs:{id:"二-简单动态字符串-sds"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-简单动态字符串-sds"}},[s._v("#")]),s._v(" 二.简单动态字符串(SDS)")]),s._v(" "),t("p",[s._v("Redis构建了一种名为简单动态字符串的抽象类型,并将SDS用作Redis的默认字符串表示")]),s._v(" "),t("div",{staticClass:"language-C line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sdshdr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 记录 buf 数组中已使用字节的数量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等于 SDS 所保存字符串的长度")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 记录 buf 数组中未使用字节的数量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" free"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 字节数组，用于保存字符串")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" buf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("SDS相比C语言字符串优势:")]),s._v(" "),t("ol",[t("li",[s._v("SES获取字符串长度时间复杂度为O(1),C语言为O(n)")]),s._v(" "),t("li",[s._v("SDS能杜绝缓存区溢出,对SDS进行修改时,会先检查SDS空间是否充足,不够会自动扩容")]),s._v(" "),t("li",[s._v("SDS能减少修改字符串带来的内存重新分配\n"),t("ul",[t("li",[s._v("空间预分配: 当SDS进行扩容时不止会增加需要的空间大小,还额外分配一些未使用的空间")]),s._v(" "),t("li",[s._v("惰性空间释放: 当SDS的API需要缩短SDS保存的字符串时,并不会立即内存重分配,而是使用free变量来记录未使用空间")])])])]),s._v(" "),t("h2",{attrs:{id:"三-字典"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-字典"}},[s._v("#")]),s._v(" 三.字典")]),s._v(" "),t("p",[s._v("相当与Java中的Map,是一种键值对的抽象数据机构")]),s._v(" "),t("p",[s._v("Redis的底层就是用字典实现,对数据库的增删改查操作都是构建在字典的操作之上")]),s._v(" "),t("p",[s._v("字典的底层实现就是Hash表")]),s._v(" "),t("h3",{attrs:{id:"_1-哈希表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-哈希表"}},[s._v("#")]),s._v(" 1.哈希表")]),s._v(" "),t("div",{staticClass:"language-C line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dictht")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 哈希表数组")]),s._v("\n    dictEntry "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("table"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 哈希表大小")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 哈希表大小掩码，用于计算索引值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 总是等于 size - 1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" sizemask"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 该哈希表已有节点的数量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" used"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" dictht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("h3",{attrs:{id:"_2-哈希表节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-哈希表节点"}},[s._v("#")]),s._v(" 2.哈希表节点")]),s._v(" "),t("p",[s._v("dictEntry则是哈希表节点,每个dictEntry都保存一个键值对")]),s._v(" "),t("div",{staticClass:"language-C line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dictEntry")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 键")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("val"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint64_t")]),s._v(" u64"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("int64_t")]),s._v(" s64"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指向下个哈希表节点，形成链表")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dictEntry")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" dictEntry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("h3",{attrs:{id:"_3-字典"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-字典"}},[s._v("#")]),s._v(" 3.字典")]),s._v(" "),t("div",{staticClass:"language-C line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dict")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 类型特定函数")]),s._v("\n    dictType "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 私有数据")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("privdata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 哈希表")]),s._v("\n    dictht ht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// rehash 索引")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当 rehash 不在进行时，值为 -1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" rehashidx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* rehashing not in progress if rehashidx == -1 */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("简单总结一下")]),s._v(" "),t("p",[s._v("一个Redis节点维护一个字典dict")]),s._v(" "),t("p",[s._v("一个字典维护两张hash表")]),s._v(" "),t("p",[s._v("每一张hash表又维护一个哈希节点类型的数组")]),s._v(" "),t("p",[s._v("一个哈希节点存放一个字符串")]),s._v(" "),t("h3",{attrs:{id:"_4-hash算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-hash算法"}},[s._v("#")]),s._v(" 4.hash算法")]),s._v(" "),t("p",[s._v("当一个新的键值对插入到字典中,需要计算索引值,Redis的计算方法是")]),s._v(" "),t("p",[s._v("先计算哈希值")]),s._v(" "),t("p",[s._v("再计算索引值")]),s._v(" "),t("div",{staticClass:"language-ini line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用字典设置的哈希函数，计算键 key 的哈希值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("hash")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("dict->type->hashFunction(key);")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用哈希表的 sizemask 属性和哈希值，计算出索引值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据情况不同， ht[x] 可以是 ht[0] 或者 ht[1]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("index")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("hash & dict->ht[x].sizemask;")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"_5-hash冲突"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-hash冲突"}},[s._v("#")]),s._v(" 5.hash冲突")]),s._v(" "),t("p",[s._v("当出现Hash冲突时,Redis使用的是"),t("strong",[s._v("链地址法")])]),s._v(" "),t("p",[s._v("链地址法就是将冲突的节点构成一个链表放在该索引位置上")]),s._v(" "),t("p",[s._v("Redis使用的头插法")]),s._v(" "),t("h3",{attrs:{id:"_6-rehash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-rehash"}},[s._v("#")]),s._v(" 6.rehash")]),s._v(" "),t("p",[s._v("随着不断的操作，hash表中的键值对可能会增多或减少")]),s._v(" "),t("p",[s._v("为了让哈希表的负载因子保持在一个范围内，需要对 hash表进行扩容或收缩，收缩和扩容的过程就叫"),t("strong",[s._v("rehash")])]),s._v(" "),t("p",[s._v("过程如下:")]),s._v(" "),t("ol",[t("li",[s._v("为字典的 ht[1] 哈希表分配空间， 这个哈希表的空间大小取决于要执行的操作， 以及 ht[0] 当前包含的键值对数量 （也即是 ht[0].used 属性的值）\n"),t("ul",[t("li",[s._v("如果是扩展操作,ht[1]的大小为第一个大于等于ht[0].used*2的2^n")]),s._v(" "),t("li",[s._v("如果是扩展操作,ht[1]的大小为第一个大于等于ht[0].used的2^n")])])]),s._v(" "),t("li",[s._v("将保存在ht[0]中的所有键值对重新计算键的哈希值和索引值,然后将键值对放置到ht[1]哈希表的指定位置上")]),s._v(" "),t("li",[s._v("当 ht[0] 包含的所有键值对都迁移到了 ht[1] 之后 （ht[0] 变为空表）， 释放 ht[0] ， 将 ht[1] 设置为 ht[0] ， 并在 ht[1] 新创建一个空白哈希表， 为下一次 rehash 做准备")])]),s._v(" "),t("h3",{attrs:{id:"_7-渐进式rehash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-渐进式rehash"}},[s._v("#")]),s._v(" 7.渐进式rehash")]),s._v(" "),t("p",[s._v("rehash 时会将 ht[0] 所有的键值对迁移到 ht[1] 中，但这个动作不是一次性的，而是分多次、渐进式地完成")]),s._v(" "),t("p",[s._v("这样的所得原因时：当数据量大的时候一次性迁移会造成服务器在一段时间内定制服务")]),s._v(" "),t("p",[s._v("为了避免发生这样的事就出现了"),t("strong",[s._v("渐进式rehash")]),s._v(":")]),s._v(" "),t("ol",[t("li",[s._v("为 ht[1] 分配空间， 让字典同时持有 ht[0] 和 ht[1] 两个哈希表")]),s._v(" "),t("li",[s._v("在字典中维护一个索引计数器变量rehashidx,设置为0")]),s._v(" "),t("li",[s._v("在 rehash 进行期间， 每次对字典执行添加、删除、查找或者更新操作时， 程序除了执行指定的操作以外， 还会顺带将 ht[0] 哈希表在 rehashidx 索引上的所有键值对 rehash 到 ht[1] ， 当 rehash 工作完成之后， 程序将 rehashidx 属性的值增一")]),s._v(" "),t("li",[s._v("随着字典操作的不断执行， 最终在某个时间点上， ht[0] 的所有键值对都会被 rehash 至 ht[1] ， 这时程序将 rehashidx 属性的值设为 -1 ， 表示 rehash 操作已完成")])]),s._v(" "),t("p",[s._v("这样的操作避免了集中式rehash带来的庞大计算量,保证ht[0]的键值对数量只减不增,最终变为空表")]),s._v(" "),t("h2",{attrs:{id:"四-跳表skiplist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-跳表skiplist"}},[s._v("#")]),s._v(" 四.跳表skiplist")]),s._v(" "),t("p",[s._v("跳表是一种有序数据结构， 它通过在每个节点中维持多个指向其他节点的指针， 从而达到快速访问节点的目的")]),s._v(" "),t("p",[s._v("跳表支持平均 O(log N) ,最坏 O(N) 复杂度的节点查找， 还可以通过顺序性操作来批量处理节点")]),s._v(" "),t("h3",{attrs:{id:"_1-跳表结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-跳表结构"}},[s._v("#")]),s._v(" 1.跳表结构")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplist")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表头节点和表尾节点")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("header"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("tail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表中节点的数量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表中层数最大的节点的层数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" level"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" zskiplist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("跳表的其实就是一个链表加上多层索引")]),s._v(" "),t("p",[s._v("一张图就能解释明白")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://18334034784.oss-cn-chengdu.aliyuncs.com/lin-oss/skiplist.png",alt:"img"}})]),s._v(" "),t("p",[s._v("其实有点像B树是吧")]),s._v(" "),t("h3",{attrs:{id:"_2-跳表节点结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-跳表节点结构"}},[s._v("#")]),s._v(" 2.跳表节点结构")]),s._v(" "),t("div",{staticClass:"language-C line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 后退指针")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("backward"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 分值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 成员对象")]),s._v("\n    robj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 层")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistLevel")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 前进指针")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("forward"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 跨度")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" span"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" level"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" zskiplistNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("h3",{attrs:{id:"_3-跳表的插入与删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-跳表的插入与删除"}},[s._v("#")]),s._v(" 3.跳表的插入与删除")]),s._v(" "),t("p",[s._v("为了保证原始链表中数据的有序性，我们需要先找到新数据应该插入或删除的位置。")]),s._v(" "),t("p",[s._v("可以基于多级索引，快速查找到新数据的插入/删除位置，时间复杂度为O(log n)")]),s._v(" "),t("ul",[t("li",[s._v("插入节点时需要更新索引")]),s._v(" "),t("li",[s._v("删除节点时需要将索引也删除")])]),s._v(" "),t("h3",{attrs:{id:"_4-索引更新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-索引更新"}},[s._v("#")]),s._v(" 4.索引更新")]),s._v(" "),t("p",[s._v("当频繁地向跳表中插入数据时，如果插入过程不伴随着索引更新，就有可能导致某2个索引节点之间数据非常多在")]),s._v(" "),t("p",[s._v("极端地情况下，跳表就会退化成单链表")]),s._v(" "),t("p",[s._v("当向跳表中插入数据时，我们选择同时将这个数据插入到部分索引层中。 如何决定插入到哪些索引层中呢？ 通过一个随机函数来决定，比如通过随机函数得到某个值 K, 那么就"),t("strong",[s._v("将这个节点添加到第一级到第K级索引中")])]),s._v(" "),t("p",[s._v("从第一级到第k级都加一遍")]),s._v(" "),t("blockquote",[t("p",[s._v("跳表索引层数什么时候更新呢?")])]),s._v(" "),t("p",[s._v("每一个元素添加到跳表中时，首先需要随机指定这个元素在跳表中的层数")]),s._v(" "),t("p",[s._v("如果随机指定的层数大于了跳表的层数，则在将元素添加到跳表中之前，还需要扩大跳表的层数")]),s._v(" "),t("p",[s._v("而扩大跳表的层数就是将头尾节点的层数扩大")]),s._v(" "),t("h2",{attrs:{id:"五-整数集合intset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五-整数集合intset"}},[s._v("#")]),s._v(" 五.整数集合intset")]),s._v(" "),t("p",[s._v("整数集合intset是集合键的底层实现之一:")]),s._v(" "),t("p",[s._v("当一个集合只包含整数值元素,并且这个集合的元素数量不多时,Redis就会使用整数集合作为集合键的底层实现")]),s._v(" "),t("div",{staticClass:"language-C line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("intset")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编码方式")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" encoding"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 集合包含的元素数量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 保存元素的数组")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("int8_t")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" intset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("content数组是整数集合的底层实现")]),s._v(" "),t("p",[s._v("整数集合的每个元素都是contents数组的一个数组项(item),各个项再数组中的大小从小到大有序排列")]),s._v(" "),t("p",[s._v("每当我们要将一个新元素添加到整数集合里面， 并且新元素的类型比整数集合现有所有元素的类型都要长时， 整数集合需要先进行"),t("strong",[s._v("升级（upgrade）")]),s._v("， 然后才能将新元素添加到整数集合里面。")]),s._v(" "),t("p",[s._v("升级整数集合并添加新元素共分为三步进行：")]),s._v(" "),t("ol",[t("li",[s._v("根据新元素的类型， 扩展整数集合底层数组的空间大小， 并为新元素分配空间")]),s._v(" "),t("li",[s._v("将底层数组现有的所有元素都转换成与新元素相同的类型， 并将类型转换后的元素放置到正确的位上， 而且在放置元素的过程中， 需要继续维持底层数组的有序性质不变")]),s._v(" "),t("li",[s._v("将新元素添加到底层数组里面")])]),s._v(" "),t("p",[s._v("整数集合不支持降级操作， 一旦对数组进行了升级， 编码就会一直保持升级后的状态")]),s._v(" "),t("h2",{attrs:{id:"六-压缩列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六-压缩列表"}},[s._v("#")]),s._v(" 六.压缩列表")]),s._v(" "),t("p",[s._v("压缩列表是 Redis 为了节约内存而开发的， 由一系列特殊编码的连续内存块组成的顺序型数据结构")]),s._v(" "),t("p",[s._v("组成如下")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("zlbytes")]),s._v(" "),t("th",[s._v("zltail")]),s._v(" "),t("th",[s._v("zllen")]),s._v(" "),t("th",[s._v("entry1")]),s._v(" "),t("th",[s._v("entry2")]),s._v(" "),t("th",[s._v("...")]),s._v(" "),t("th",[s._v("entryN")]),s._v(" "),t("th",[s._v("zlend")])])]),s._v(" "),t("tbody")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("zlbytes")]),s._v(" : 整个压缩列表占用的内存字节数")]),s._v(" "),t("li",[t("strong",[s._v("zltail")]),s._v(" : 记录压缩列表表尾节点距离压缩列表起始地址有多少字节")]),s._v(" "),t("li",[t("strong",[s._v("zllen")]),s._v(" : 记录压缩列表的节点数量")]),s._v(" "),t("li",[t("strong",[s._v("zlend")]),s._v(" : 标记表尾")])]),s._v(" "),t("p",[s._v("每一个压缩列表节点,即entryN由三个部分组成")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[s._v("previous_entry_length")]),s._v(" "),t("th",{staticStyle:{"text-align":"center"}},[s._v("encoding")]),s._v(" "),t("th",{staticStyle:{"text-align":"center"}},[s._v("content")])])]),s._v(" "),t("tbody")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("previous_entry_length")]),s._v(" : 记录压缩列表前一个节点的长度")]),s._v(" "),t("li",[t("strong",[s._v("encoding")]),s._v(" : 记录了节点的 content 属性所保存数据的类型以及长度")]),s._v(" "),t("li",[t("strong",[s._v("content")]),s._v(" : 负责保存节点的值")])]),s._v(" "),t("h3",{attrs:{id:"写在最后"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写在最后"}},[s._v("#")]),s._v(" 写在最后")]),s._v(" "),t("p",[s._v("双向链表比较熟我就不说了")])])}),[],!1,null,null,null);t.default=e.exports}}]);