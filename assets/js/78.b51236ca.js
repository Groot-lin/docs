(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{503:function(_,v,b){"use strict";b.r(v);var t=b(2),a=Object(t.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("div",{staticClass:"custom-block warning"},[v("p",{staticClass:"title"}),v("p",[_._v("Dubbo是什么?")])]),v("p",[_._v("这是一个好问题")]),_._v(" "),v("p",[_._v("Dubbo是一种高性能、轻量级的分布式服务框架，它的设计目标是为大规模分布式应用提供支持。")]),_._v(" "),v("p",[_._v("Dubbo由阿里巴巴提供，最初由Alibaba Dubbo Team开发，目前已经成为Apache基金会的顶级项目。")]),_._v(" "),v("p",[_._v("Dubbo在国内得到了广泛的应用，像阿里巴巴、京东、美团等众多互联网企业都在使用该框架。")]),_._v(" "),v("p",[_._v("简单来说就是一款优秀的RPC框架")]),_._v(" "),v("h2",{attrs:{id:"一-dubbo架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一-dubbo架构"}},[_._v("#")]),_._v(" 一.Dubbo架构")]),_._v(" "),v("h3",{attrs:{id:"_1-通信流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-通信流程"}},[_._v("#")]),_._v(" 1.通信流程")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://18334034784.oss-cn-chengdu.aliyuncs.com/lin-oss/dubbo%E6%9E%B6%E6%9E%84.png",alt:"874710-20210327165416057-319858511.png"}})]),_._v(" "),v("p",[_._v("这是一张经典的Dubbo图")]),_._v(" "),v("p",[_._v("下面简单介绍一下Dubbo的通信流程:")]),_._v(" "),v("ol",[v("li",[_._v("服务提供者启动")]),_._v(" "),v("li",[_._v("服务提供者向注册中心注册服务")]),_._v(" "),v("li",[_._v("服务消费者根据负载均衡策略从注册中心选择一个服务提供者")]),_._v(" "),v("li",[_._v("服务消费者通过网络向服务提供者发送请求消息")]),_._v(" "),v("li",[_._v("服务提供者处理请求并返回响应消息给服务消费者")])]),_._v(" "),v("h3",{attrs:{id:"_2-三层架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-三层架构"}},[_._v("#")]),_._v(" 2.三层架构")]),_._v(" "),v("ol",[v("li",[_._v("接口层")])]),_._v(" "),v("p",[_._v("接口层是Dubbo的核心，它定义了服务提供者和服务消费者之间的通信接口")]),_._v(" "),v("p",[_._v("在Dubbo中，接口默认使用Java接口实现，具有很强的可扩展性")]),_._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[_._v("配置层")])]),_._v(" "),v("p",[_._v("配置层的作用是通过配置文件或代码来配置Dubbo的各种参数，包括连接参数、超时时间、重试次数等等")]),_._v(" "),v("p",[_._v("Dubbo支持多种配置方式，包括XML配置、注解配置和属性配置等")]),_._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[_._v("基础设施层")])]),_._v(" "),v("p",[_._v("基础设施层是Dubbo的底层架构，包括了Dubbo的RPC框架、网络通信、序列化和反序列化等实现细节")]),_._v(" "),v("p",[_._v("Dubbo的基础设施层具有较高的性能和可定制性")]),_._v(" "),v("h2",{attrs:{id:"二-dubbo高可用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二-dubbo高可用"}},[_._v("#")]),_._v(" 二.Dubbo高可用")]),_._v(" "),v("h3",{attrs:{id:"_1-服务降级"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-服务降级"}},[_._v("#")]),_._v(" 1.服务降级")]),_._v(" "),v("p",[_._v("服务降级指的是当系统出现故障或者异常情况时，系统可以通过关闭一些非核心的功能来保证其他核心功能的正常运行")]),_._v(" "),v("p",[_._v("Dubbo的服务降级是通过Mock来实现的，Mock可以在接口定义的时候指定")]),_._v(" "),v("p",[_._v("Dubbo在正常情况下会使用服务提供者提供的服务，当服务提供者出现异常或者超时时，Dubbo会自动调用Mock中的方法返回预设的值")]),_._v(" "),v("h3",{attrs:{id:"_2-服务熔断"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-服务熔断"}},[_._v("#")]),_._v(" 2.服务熔断")]),_._v(" "),v("p",[_._v("服务熔断是指当系统中某个服务出现异常或者超时等情况时，Dubbo会在一定时间内暂停对该服务的调用，防止服务雪崩，提高系统的可用性")]),_._v(" "),v("p",[_._v("Dubbo支持配置熔断的时间窗口和请求的最大失败次数，当超过这个次数后，Dubbo将不再调用该服务，直到时间窗口结束")]),_._v(" "),v("p",[_._v("Dubbo的服务熔断是通过circuit breaker模式来实现的，Dubbo会根据服务的负载情况来判断是否需要熔断")]),_._v(" "),v("h3",{attrs:{id:"_3-服务隔离"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-服务隔离"}},[_._v("#")]),_._v(" 3.服务隔离")]),_._v(" "),v("p",[_._v("服务隔离指的是将不同的服务放在不同的进程或者容器中运行，防止某个服务出现故障影响到其他服务的正常运行")]),_._v(" "),v("p",[_._v("Dubbo支持将不同的服务放在不同的进程或者容器中运行，实现服务的隔离")]),_._v(" "),v("h3",{attrs:{id:"_4-重试机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-重试机制"}},[_._v("#")]),_._v(" 4.重试机制")]),_._v(" "),v("p",[_._v("重试机制指的是在服务调用失败后，Dubbo会根据一定的规则进行重试，直到服务调用成功或达到最大重试次数。Dubbo可以配置重试次数、重试间隔时间等参数，实现重试机制")]),_._v(" "),v("p",[_._v("Dubbo默认提供了重试机制，可以通过在配置文件中设置retries参数来启用")]),_._v(" "),v("p",[_._v("如果服务调用失败，则Dubbo会自动重新尝试调用服务，直到达到最大重试次数或服务调用成功")]),_._v(" "),v("p",[_._v("重试过程中，Dubbo会等待一定的时间间隔，以避免对服务的过度压力")]),_._v(" "),v("h2",{attrs:{id:"三-dubbo负载均衡"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三-dubbo负载均衡"}},[_._v("#")]),_._v(" 三.Dubbo负载均衡")]),_._v(" "),v("p",[_._v("Dubbo中的负载均衡算法默认为"),v("strong",[_._v("轮询负载均衡算法")])]),_._v(" "),v("p",[_._v("它会将服务提供者列表按照顺序轮流选择")]),_._v(" "),v("p",[_._v("如果其中一个服务提供者的性能较差，那么使用轮询算法会导致它会被频繁地请求，从而降低整体性能")]),_._v(" "),v("p",[_._v("因此，轮询算法适用于所有服务提供者性能相同的情况下")]),_._v(" "),v("p",[_._v("此外,Dubbo还支持")]),_._v(" "),v("ol",[v("li",[_._v("随机负载均衡")]),_._v(" "),v("li",[_._v("最少活跃调用负载均衡")]),_._v(" "),v("li",[_._v("一致性Hash负载均衡")])]),_._v(" "),v("p",[_._v("等等")]),_._v(" "),v("h2",{attrs:{id:"四-dubbo的集群容错机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四-dubbo的集群容错机制"}},[_._v("#")]),_._v(" 四.Dubbo的集群容错机制")]),_._v(" "),v("h3",{attrs:{id:"_1-失败自动切换"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-失败自动切换"}},[_._v("#")]),_._v(" 1. 失败自动切换")]),_._v(" "),v("p",[_._v("在调用服务时，Dubbo会选择一个可用的服务提供者，如果该提供者未响应或发生异常，Dubbo会自动切换到下一个可用的服务提供者进行调用，这就是失败自动切换机制")]),_._v(" "),v("h3",{attrs:{id:"_2-失败安全保护"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-失败安全保护"}},[_._v("#")]),_._v(" 2. 失败安全保护")]),_._v(" "),v("p",[_._v("在失败自动切换的基础上，Dubbo提供了另一种集群容错机制：失败安全保护")]),_._v(" "),v("p",[_._v("它的原理是当出现某个服务提供者不可用时，Dubbo会暂时禁用该服务提供者，一段时间后再次开启，检查其可用性。通过这种方式，Dubbo保证了系统的稳定性以及在出现异常情况时调用的可用性")]),_._v(" "),v("h3",{attrs:{id:"_3-并行调用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-并行调用"}},[_._v("#")]),_._v(" 3. 并行调用")]),_._v(" "),v("p",[_._v("Dubbo在集群容错中提供了一种新的机制：并行调用")]),_._v(" "),v("p",[_._v("当服务提供者在某个时间段内不能响应请求时，Dubbo会开启多个服务提供者实例，将请求发送给这些实例进行并行处理，快速的获取结果并返回给服务消费者")]),_._v(" "),v("h3",{attrs:{id:"_4-快速失败"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-快速失败"}},[_._v("#")]),_._v(" 4. 快速失败")]),_._v(" "),v("p",[_._v("快速失败机制指当某个服务提供者出现异常时，Dubbo会快速的抛出异常给服务消费者，避免服务调用者长时间等待请求响应结果")]),_._v(" "),v("p",[_._v("同时，Dubbo也提供了一个超时时间，如果服务提供者在规定时间内未能响应请求，则Dubbo会快速的抛出异常给服务消费者，避免请求长时间等待没有响应结果")]),_._v(" "),v("h2",{attrs:{id:"五-dubbo底层通信"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#五-dubbo底层通信"}},[_._v("#")]),_._v(" 五.Dubbo底层通信")]),_._v(" "),v("p",[_._v("Dubbo的底层通信是建立在Netty的通信框架上的，Netty是一个高性能的、异步的、事件驱动的网络应用程序框架")]),_._v(" "),v("p",[_._v("在Dubbo中，Netty扮演着很重要的角色，其提供的通信能力能够支持Dubbo不同节点之间的通信，并且通过高效的I/O操作完成请求响应的过程")]),_._v(" "),v("p",[_._v("Dubbo利用Netty的通信框架实现了从网络层到协议层的完整封装，使得Dubbo的通信效率得到很大的提升")]),_._v(" "),v("p",[_._v("Dubbo利用JDK自带的序列化与反序列化")]),_._v(" "),v("p",[_._v("也支持多种序列化协议")]),_._v(" "),v("p",[_._v("如JSON,Hession,Kryo等")]),_._v(" "),v("h2",{attrs:{id:"六-dubbo扩展机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#六-dubbo扩展机制"}},[_._v("#")]),_._v(" 六.Dubbo扩展机制")]),_._v(" "),v("p",[_._v("Dubbo采用"),v("strong",[_._v("SPI")]),_._v("的机制，用于扩展或替换框架中的某个实现")]),_._v(" "),v("p",[_._v("Dubbo对SPI机制的扩展可以通过Java的SPI机制实现，也可以通过Dubbo自己定义的SPI机制实现，Dubbo自己定义的SPI机制要完善一些")]),_._v(" "),v("p",[_._v("Dubbo自定义的SPI机制定义了一个扩展点接口，每个扩展点接口对应了一组扩展实现类，而这些实现类都必须要使用SPI的配置文件进行配置")]),_._v(" "),v("p",[_._v("Dubbo的扩展点接口中，我们可以定义类似于ExtensionLoader这样的类，通过这些类，我们可以获取到相关扩展实现类，从而进行自定义的扩展")])])}),[],!1,null,null,null);v.default=a.exports}}]);